package com.example.demo.config;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.view.JstlView;
import org.springframework.web.servlet.view.UrlBasedViewResolver;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;
import org.springframework.web.servlet.view.tiles3.TilesConfigurer;
import org.springframework.web.servlet.view.tiles3.TilesView;


@Configuration
public class WebConfig implements WebMvcConfigurer {
	
	@Value("${config.upload-file-path}")
	private String uploadFilePath;

	@Value("${config.upload-bizfile-path}")
	private String uploadBizFilePath;
	
	@Value("${config.view-img-path}")
	private String viewImgPath;
	
    @Bean
    public UrlBasedViewResolver jspViewResolver() {
        UrlBasedViewResolver resolver = new UrlBasedViewResolver();
        resolver.setPrefix("/WEB-INF/views/");
        resolver.setSuffix(".jsp");
        resolver.setViewClass(JstlView.class);
        return resolver;
    }
    
    @Bean
    public TilesConfigurer tilesConfigurer() {
        final TilesConfigurer configurer = new TilesConfigurer();
        configurer.setCheckRefresh(true);
        return configurer;
    }
    
    @Bean
    public UrlBasedViewResolver tilesViewResolver() {
        UrlBasedViewResolver resolver = new UrlBasedViewResolver();
        resolver.setViewClass(TilesView.class);
        resolver.setOrder(1);
        return resolver;
    }

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		/*
		 * registry.addResourceHandler("/upload/**") // uploadFilePath :
		 * /home/sos/upload/ .addResourceLocations("file:///" + uploadFilePath)
		 * .setCachePeriod(20);
		 */

			registry.addResourceHandler("/upload/**") // uploadFilePath : /home/sos/upload/
			.addResourceLocations("file:///" + uploadFilePath)
			.setCachePeriod(20);
			
			registry.addResourceHandler("/shop/**") // viewImgPath : /home/sos/shop/
			.addResourceLocations("file:///" + viewImgPath)
			.setCachePeriod(20);
			
			registry.addResourceHandler("/admin/shop/**") // admin/shop/ 이하로 들어오는 모든 요청을 resrouceHandler에서 처리하겠다.
			.addResourceLocations("file:///" + viewImgPath) // admin/shop/ 이하로 요청이 들어왔을 때 매핑될 정적자원들의 위치 지정
			.setCachePeriod(20);
	}
	
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();
        return bCryptPasswordEncoder;
    }
	
	@Bean
	public MappingJackson2JsonView jsonView() {
		return new MappingJackson2JsonView();
	}
	
	@Autowired
	CertificationInterceptor certificationInterceptor;
    
	@Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(certificationInterceptor)
                .addPathPatterns("/user/**") // /user/~~~~ , /admin/~~~ 로 들어오는 페이지는 모두 로그인해야 진입 가능하게 설정
                .addPathPatterns("/admin/**")
        		.excludePathPatterns("/user/login") // 단, 로그인 없이 진입해도 되는 페이지는 exclude로 설정 
        		.excludePathPatterns("/user/loginCheck")
        		.excludePathPatterns("/user/logout")
        		.excludePathPatterns("/user/idCheck")
        		.excludePathPatterns("/user/joinReq")
        		.excludePathPatterns("/user/join")
        		.excludePathPatterns("/user/joinEmailCheck")
        		.excludePathPatterns("/user/notice/list")
		        .excludePathPatterns("/user/notice/post");
    }
	
	
	
}
